name: Release
on:
  push:
    tags:
      - 'v*'  # Trigger on version tags

jobs:
  build-and-release:
    runs-on: macos-latest  # Using macOS for both Android and iOS builds
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '18'
          cache: 'gradle'
      
      # Cache Gradle Dependencies
      - name: Cache Gradle Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      # Cache Build outputs
      - name: Cache Build
        uses: actions/cache@v3
        with:
          path: |
            build/
            ~/.pub-cache
          key: ${{ runner.os }}-build-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.19.0'
          channel: 'stable'
          cache: true
      
      # Create api_keys.dart from secrets
      - name: Create API Keys File
        run: |
          mkdir -p lib/app/config
          echo "class ApiKeys {" > lib/app/config/api_keys.dart
          echo "  static const String googleClientId = '${{ secrets.GOOGLE_CLIENT_ID }}';" >> lib/app/config/api_keys.dart
          echo "}" >> lib/app/config/api_keys.dart
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Install iOS dependencies
        run: |
          cd ios
          pod install
          cd ..
      
      # Build Android
      - name: Build Android APK
        run: |
          flutter build apk --release --split-per-abi
      
      # Build iOS
      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir Payload
          cp -r Runner.app Payload
          zip -r ../../../ios-release.ipa Payload
      
      # Create Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN1 }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      
      # Upload Android APKs
      - name: Upload Android APK (arm64-v8a)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN1 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-arm64-v8a-release.apk
          asset_name: dialerpad-arm64-v8a.apk
          asset_content_type: application/vnd.android.package-archive

      - name: Upload Android APK (armeabi-v7a)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN1 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk
          asset_name: dialerpad-armeabi-v7a.apk
          asset_content_type: application/vnd.android.package-archive

      # Upload iOS IPA
      - name: Upload iOS IPA
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.RELEASE_TOKEN1 }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ios-release.ipa
          asset_name: dialerpad.ipa
          asset_content_type: application/octet-stream

